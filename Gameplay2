package BrickBreaker;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.Graphics2D;
import javax.swing.Timer; 
import javax.swing.JPanel;

/**
 *
 * @author Ayesha
 */
public class Gameplay2 extends JPanel implements ActionListener,KeyListener{
	private boolean play=false;
	private int score=0;
	private int totalBrick=15;
	private Timer timer;
	private int delay=5;
	private int ballposX=120;
	private int ballposY=350;
	private int ballXdir=-1;
	private int ballYdir=-2;
	private int playerX=350;
	
	private MapGenerator map;
	
    /**
     *
     */
    public Gameplay2() {
            try{
		map = new MapGenerator(3,5);
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(true);
		timer = new Timer(delay,this);
		timer.start();
	
	}catch(Exception e){
                System.out.println(e);
        }
        }
	public void paint(Graphics g) {
		//black canvas
		g.setColor(Color.black);
		g.fillRect(1,1,692,592);
		
		//border
		g.setColor(Color.red);
		g.fillRect(0,0,692,3);
		g.fillRect(0,0,692,3);
		g.fillRect(691,0,3,592);
		
		//Bricks
		map.draw((Graphics2D)g);
			
 	   //level 2
		g.setColor(Color.white);
	    g.setFont(new Font("serif", Font.BOLD, 35));
	 	g.drawString("Level 2", 20, 30);
	 	
		//paddle
		g.setColor(Color.blue);
		g.fillRect(playerX,550,70,6);
		
		
		//ball
		g.setColor(Color.PINK);
		g.fillOval(ballposX,ballposY,16,15);
	
		//score 
		g.setColor(Color.white);
		g.setFont(new Font("serif", Font.BOLD, 30));
		g.drawString("Score : "+score,550,30);
		
		//GameOver
		if(ballposY>=570) {
                    try{
			play=false;
			ballXdir=0;
			ballYdir=0;
			
			g.setColor(Color.blue);
			g.setFont(new Font("serif",Font.BOLD,35));
			g.drawString("Game Over!"+"Score :"+score,200,300);
			
			g.setFont(new Font("serif",Font.BOLD,25));
			g.drawString("Press Enter to Restart.",230,350);
				
		}catch(Exception e){
                System.out.println(e);
        }
                }
		if(totalBrick<=0) {
                    try{
			play=false;
			ballXdir=0;
			ballYdir=0;
			
			g.setColor(Color.blue);
			g.setFont(new Font("serif",Font.BOLD,30));
			g.drawString("You WON!,Score :"+score,200,300);
			
			g.setFont(new Font("serif",Font.BOLD,25));
			g.drawString("Press Enter to Restart.",230,350);
		}catch(Exception e){
                System.out.println(e);
        }
                }
	}
	private void moveLeft() {
		play=true;
		playerX-=20;
	}
	private void moveRight() {
		play=true;
		playerX+=20;
	}
	
	@Override
	public void keyPressed(KeyEvent e) {
		if(e.getKeyCode()==KeyEvent.VK_LEFT) {
			if(playerX<=0)
				playerX=0;
			else
			    moveLeft();
		}
		if(e.getKeyCode()==KeyEvent.VK_RIGHT) {
			if(playerX>=600)
				playerX=600;
			else
			   moveRight();
		}
		if(e.getKeyCode()==KeyEvent.VK_ENTER) {
			if(!play) {
				score=0;
				totalBrick=21;
				ballposX=120;
				ballposY=350;
				ballXdir=-1;
				ballYdir=-2;
				playerX=320;
				
				map = new MapGenerator(3,7);
			}
		}
		repaint();
	}
	
	@Override
	public void actionPerformed(ActionEvent argO) {
		if(play) {
			if(ballposX<=0) {
				ballXdir=-ballXdir;
			}
			if(ballposX>=670) {
				ballXdir=-ballXdir;
			}
			if(ballposY<=0) {
				ballYdir=-ballYdir;
			}
			Rectangle ballReact=new Rectangle(ballposX,ballposY,20,20);
			Rectangle paddleReact=new Rectangle(playerX,550,100,8);
			
			if(ballReact.intersects(paddleReact)) {
				ballYdir=-ballYdir;
			}
			
			A:for(int i=0;i<map.map.length;i++) {
				for(int j=0;j<map.map.length;j++) {
					if(map.map[i][j]>0) {
						int width=map.brickWidth;
						int height=map.brickHeight;
						int brickXpos=80+j*width;
						int brickYpos=50+i*height;
						
						Rectangle brickReact=new Rectangle(brickXpos,brickYpos,width,height);
						
						if(ballReact.intersects(brickReact)) {
							map.setBrick(0, i, j);
							totalBrick--;
							score+=5;
							
						if(ballposX+19<=brickXpos || ballposX+1>=brickXpos+width) {
							ballXdir=-ballXdir;
							
						}
						else {
							ballYdir=-ballYdir;
						}
						break A;	
						}
					}
				}
			}
			
			ballposX+=ballXdir;
			ballposY+=ballYdir;
		}
		repaint();
	}
	@Override
	public void keyTyped(KeyEvent e) {
		
		
	}
	
	@Override
	public void keyReleased(KeyEvent e) {
		
		
	}
}
