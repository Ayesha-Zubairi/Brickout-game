package BrickBreaker;

import java.util.Scanner;
import java.io.FileInputStream;
import java.io.File;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.Timer; 
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Rectangle;
import javax.swing.JPanel;
import java.awt.Graphics2D;
import java.awt.Font;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;


public class Gameplay extends JPanel implements KeyListener, ActionListener{
	private boolean play = false;
	int score = 0;
	private int level = 1;
	private int totalBricks;
	private Timer timer;
	private int delay ;
	private int playerX = 310;
	private int ballposX = 120;
	private int ballposY = 350;
	private int ballXdir = -1;
	private int ballYdir = -2;
	
	private MapGenerator map;
	
	
	
	public Gameplay() {
            try{
		map = new MapGenerator(1,6);
                totalBricks=6;
                delay = 3;
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(false);
		timer = new Timer(delay, this);
		timer.start();

	}catch(Exception e){
                System.out.println(e);
        }
        }
	public void paint(Graphics g) {
		//background
		g.setColor(Color.black);
		g.fillRect(1, 1, 692, 592);
		
		//borders
		g.setColor(Color.yellow);
		g.fillRect(0, 0, 3, 592);
		g.fillRect(0, 0, 692, 3);
		g.fillRect(691, 0, 3, 592);
		
		//drawing map
		map.draw((Graphics2D)g);
		
		//level 1
		g.setColor(Color.white);
		g.setFont(new Font("serif", Font.BOLD, 25));
		g.drawString("Level: 1", 100, 30);
		
		
                //scores
		g.setColor(Color.white);
		g.setFont(new Font("serif", Font.BOLD, 25));
		g.drawString(""+score, 590, 30);
            
            try{
                File file = new File("Score.txt");
                SimpleDateFormat sd  =  new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
                System.out.println(sd.format(file.lastModified()));
                System.out.println("Scores: "+score);
               
            }catch(Exception e){
                System.out.println("ERROR!!");
            }  
            try{
                File myfile = new File("Score.txt");
                Scanner sc = new Scanner(myfile);
                while(sc.hasNextLine()){
                    String line= sc.nextLine();
                    System.out.println(line);
                }
                sc.close();
            }catch(Exception e){
                System.out.println("ERROR!!");
            }
            
            
		//the paddle
		g.setColor(Color.green);
		g.fillRect(playerX, 550, 100, 8);
		
		//the ball
		g.setColor(Color.yellow);
		g.fillOval(ballposX, ballposY, 20, 20);
		
		//game over
		if(ballposY > 570) {
                    try{
			play = false;
			ballXdir = 0;
			ballYdir = 0;
			g.setColor(Color.white);
			g.setFont(new Font("serif", Font.BOLD, 30));
			g.drawString("GAME OVER!, Scores: "+score, 185, 300);
			
			
			g.setFont(new Font("serif", Font.BOLD, 20));
			g.drawString("PRESS ENTER TO RESTART!!", 215, 350);
			
			
		}catch(Exception e){
                        System.out.println(e);
                }
                }
		
		if(totalBricks == 0) {// next level
                    try{
			play = false;
			ballXdir = 0;
			ballYdir = 0;
			
			g.setColor(Color.white);
			g.setFont(new Font("serif", Font.BOLD, 30));
			g.drawString("YOU WON!",260, 300);
			
			
			g.setFont(new Font("serif", Font.BOLD, 20));
			g.drawString("PRESS ENTER FOR LEVEL 2", 215, 350);  
                        }catch(Exception e){
                        System.out.println(e);
                }
		}
		
		
		g.dispose();
                
                
		

		
		

	}
        

	@Override
	public void actionPerformed(ActionEvent e) {
		timer.start();

		if(play) {
if(new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(playerX,550, 100, 8))) {
				ballYdir =- ballYdir;
			}

A:	for(int i=0; i<map.map.length; i++) {// setting the ball
				for(int j =0; j<map.map[0].length; j++) {
					if(map.map[i][j] > 0) {
                                            try{
						int brickX = j* map.brickWidth + 80;
						int brickY = i* map.brickHeight + 50;
						int brickWidth = map.brickWidth;
						int brickHeight = map.brickHeight;
						
						Rectangle rect = new Rectangle(brickX, brickY, brickWidth, brickHeight);
						Rectangle ballRect = new Rectangle(ballposX, ballposY, 20, 20);
						Rectangle brickRect= rect;
						
						
						if(ballRect.intersects(brickRect)) {
							map.setBrickValue(0, i, j);
							totalBricks --;
							score += 5;
							
							if(ballposX + 19 <= brickRect.x || ballposX + 1 >= brickRect.x + brickRect.width) {
								ballXdir = -ballXdir;
							}else {
								ballYdir = -ballYdir;
							}
							break A;
						}
					}catch(Exception f){
                                    System.out.println(f);
                }	
					}
				}
			}


			ballposX += ballXdir;
			ballposY += ballYdir;
			if(ballposX < 0) {
				ballXdir =- ballXdir;
			}
			if(ballposY < 0) {
				ballYdir =- ballYdir;
			}
			if(ballposX> 670) {
				ballXdir =- ballXdir;
			}
			
		}
		repaint();
	} 
        

	@Override
	public void keyTyped(KeyEvent e) {	}

	@Override
	public void keyReleased(KeyEvent e) {		}

	@Override
	public void keyPressed(KeyEvent e) {//to move the ball
		if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
			if(playerX >=600) {
				playerX = 600;
			}
			else {
				moveRight();
				
			}
			
		}
		if(e.getKeyCode() == KeyEvent.VK_LEFT) {
			if(playerX < 10) {
				playerX = 10;
			}
			else
			{
				moveLeft();
			}
		}
		if(e.getKeyCode() == KeyEvent.VK_ENTER) {
			if(!play) {
				play = false;                                
				ballposX = 120;
				ballposY = 350;
				ballXdir = -1;
				ballYdir = -2;
				playerX = 310;
				score ++;
				totalBricks = 24;                                                   
                                
				map = new MapGenerator(3,8);
                               
                   
                                   repaint();
                                   
                            }
                        
                        
                                
                    }



  
            }


	private void moveRight() {
		play = true;
		playerX+=20;
		
	
	}

	private void moveLeft() {
		play = true;
		playerX-=20;
		
		
		
	}

    
}
